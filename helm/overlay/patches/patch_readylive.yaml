---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: controller-manager
  namespace: system
spec:
  template:
    spec:
      containers:
        - name: manager
          securityContext:
            seccompProfile:
             type: '{{ .Values.containerSecurityContext.seccompProfile.type }}'
            privileged: '{{ .Values.containerSecurityContext.privileged }}'
            allowPrivilegeEscalation: '{{ .Values.containerSecurityContext.allowPrivilegeEscalation }}'
            runAsNonRoot: '{{ .Values.containerSecurityContext.runAsNonRoot }}'
            runAsUser: '{{ .Values.containerSecurityContext.runAsUser }}'
            runAsGroup: '{{ .Values.containerSecurityContext.runAsGroup }}'
          livenessProbe:
            initialDelaySeconds: '{{ .Values.livenessProbe.initialDelaySeconds }}'
            periodSeconds: '{{ .Values.livenessProbe.periodSeconds }}'
            timeoutSeconds: '{{ .Values.livenessProbe.timeoutSeconds }}'
            successThreshold: '{{ .Values.livenessProbe.successThreshold }}'
            failureThreshold: '{{ .Values.livenessProbe.failureThreshold }}'
          readinessProbe:
            initialDelaySeconds: '{{ .Values.readinessProbe.initialDelaySeconds }}'
            periodSeconds: '{{ .Values.readinessProbe.periodSeconds }}'
            timeoutSeconds: '{{ .Values.readinessProbe.timeoutSeconds }}'
            successThreshold: '{{ .Values.readinessProbe.successThreshold }}'
            failureThreshold: '{{ .Values.readinessProbe.failureThreshold }}'



---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cert-manager
  namespace: system
spec:
  template:
    spec:
      containers:
        - name: manager
          securityContext:
            seccompProfile:
              type: '{{ .Values.containerSecurityContext.seccompProfile.type }}'
            privileged: '{{ .Values.containerSecurityContext.privileged }}'
            allowPrivilegeEscalation: '{{ .Values.containerSecurityContext.allowPrivilegeEscalation }}'
            runAsNonRoot: '{{ .Values.containerSecurityContext.runAsNonRoot }}'
            runAsUser: '{{ .Values.containerSecurityContext.runAsUser }}'
            runAsGroup: '{{ .Values.containerSecurityContext.runAsGroup }}'
          livenessProbe:
            initialDelaySeconds: '{{ .Values.livenessProbe.initialDelaySeconds }}'
            periodSeconds: '{{ .Values.livenessProbe.periodSeconds }}'
            timeoutSeconds: '{{ .Values.livenessProbe.timeoutSeconds }}'
            successThreshold: '{{ .Values.livenessProbe.successThreshold }}'
            failureThreshold: '{{ .Values.livenessProbe.failureThreshold }}'
          readinessProbe:
              initialDelaySeconds: '{{ .Values.readinessProbe.initialDelaySeconds }}'
              periodSeconds: '{{ .Values.readinessProbe.periodSeconds }}'
              timeoutSeconds: '{{ .Values.readinessProbe.timeoutSeconds }}'
              successThreshold: '{{ .Values.readinessProbe.successThreshold }}'
              failureThreshold: '{{ .Values.readinessProbe.failureThreshold }}'


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: keptn-scheduler
  namespace: keptn-lifecycle-toolkit-system
spec:
  template:
    spec:
      containers:
        - name: keptn-scheduler
          securityContext:
            seccompProfile:
              type: '{{ .Values.containerSecurityContext.seccompProfile.type }}'
            privileged: '{{ .Values.containerSecurityContext.privileged }}'
            allowPrivilegeEscalation: '{{ .Values.containerSecurityContext.allowPrivilegeEscalation }}'
            runAsNonRoot: '{{ .Values.containerSecurityContext.runAsNonRoot }}'
            runAsUser: '{{ .Values.containerSecurityContext.runAsUser }}'
            runAsGroup: '{{ .Values.containerSecurityContext.runAsGroup }}'
          livenessProbe:
            initialDelaySeconds: '{{ .Values.livenessProbe.initialDelaySeconds }}'
            periodSeconds: '{{ .Values.livenessProbe.periodSeconds }}'
            timeoutSeconds: '{{ .Values.livenessProbe.timeoutSeconds }}'
            successThreshold: '{{ .Values.livenessProbe.successThreshold }}'
            failureThreshold: '{{ .Values.livenessProbe.failureThreshold }}'
          readinessProbe:
            initialDelaySeconds: '{{ .Values.readinessProbe.initialDelaySeconds }}'
            periodSeconds: '{{ .Values.readinessProbe.periodSeconds }}'
            timeoutSeconds: '{{ .Values.readinessProbe.timeoutSeconds }}'
            successThreshold: '{{ .Values.readinessProbe.successThreshold }}'
            failureThreshold: '{{ .Values.readinessProbe.failureThreshold }}'

